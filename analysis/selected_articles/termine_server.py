##################################################
# file: termine_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py http://www.nactem.ac.uk/software/termine/webservice/termine.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from termine_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
class analyze_request:
    def __init__(self, **kw):
        """Keyword parameters:
        src -- part src
        input_format -- part input_format
        output_format -- part output_format
        stoplist -- part stoplist
        filter -- part filter
        """
        self._src =  kw.get("src")
        self._input_format =  kw.get("input_format")
        self._output_format =  kw.get("output_format")
        self._stoplist =  kw.get("stoplist")
        self._filter =  kw.get("filter")
analyze_request.typecode = Struct(pname=("urn:termine","analyze"), ofwhat=[ZSI.TC.String(pname="src", aname="_src", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="input_format", aname="_input_format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="output_format", aname="_output_format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="stoplist", aname="_stoplist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="filter", aname="_filter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=analyze_request, encoded="urn:termine")

class analyze_response:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
analyze_response.typecode = Struct(pname=("urn:termine","analyzeResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=analyze_response, encoded="urn:termine")


# Service Skeletons
class termine(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/termine', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_analyze(self, ps, **kw):
        request = ps.Parse(analyze_request.typecode)
        return request,analyze_response()

    soapAction[''] = 'soap_analyze'
    root[(analyze_request.typecode.nspname,analyze_request.typecode.pname)] = 'soap_analyze'

