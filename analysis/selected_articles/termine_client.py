##################################################
# file: termine_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py http://www.nactem.ac.uk/software/termine/webservice/termine.wsdl
# 
##################################################

from termine_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class termineLocator:
    termine_address = "http://www.nactem.ac.uk/termine"
    def gettermineAddress(self):
        return termineLocator.termine_address
    def gettermine(self, url=None, **kw):
        return termineSOAP(url or termineLocator.termine_address, **kw)

# Methods
class termineSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: analyze
    def analyze(self, request, **kw):
        if isinstance(request, analyze_request) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=analyze_response.typecode.ofwhat, pyclass=analyze_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

class analyze_request:
    def __init__(self, **kw):
        """Keyword parameters:
        src -- part src
        input_format -- part input_format
        output_format -- part output_format
        stoplist -- part stoplist
        filter -- part filter
        """
        self._src =  kw.get("src")
        self._input_format =  kw.get("input_format")
        self._output_format =  kw.get("output_format")
        self._stoplist =  kw.get("stoplist")
        self._filter =  kw.get("filter")
analyze_request.typecode = Struct(pname=("urn:termine","analyze"), ofwhat=[ZSI.TC.String(pname="src", aname="_src", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="input_format", aname="_input_format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="output_format", aname="_output_format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="stoplist", aname="_stoplist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="filter", aname="_filter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=analyze_request, encoded="urn:termine")

class analyze_response:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
analyze_response.typecode = Struct(pname=("urn:termine","analyzeResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=analyze_response, encoded="urn:termine")
